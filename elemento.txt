define(\n    //-------------------------------------------------------------------\n    // DEPENDENCIES\n    //-------------------------------------------------------------------\n    ['jquery', 'knockout', 'notifier', 'ccPasswordValidator', 'pubsub', 'CCi18n', 'ccConstants', 'navigation', 'ccLogger', 'storageApi'],\n\n    //-------------------------------------------------------------------\n    // MODULE DEFINITION\n    //-------------------------------------------------------------------\n    function($, ko, notifier, CCPasswordValidator, pubsub, CCi18n, CCConstants, navigation, ccLogger, storageApi) { \n        \'use strict\';\n\n        return {\n\n            // ---------------------------------------------------------------------------\n            // ------------------------------ BEXPERT ------------------------------------\n            // ---------------------------------------------------------------------------\n\n            modalMessageType:   ko.observable(''),\n            modalMessageText:   ko.observable(''),\n            showErrorMessage:   ko.observable(false),\n            userCreated:        ko.observable(false),\n      
      ignoreBlur:         ko.observable(false),\n\n            titleSingle: 'Você tem {0} notificação',\n
 titleMultiple: 'Você tem {0} notificações',\n\n            reloadNotificacoes: function(widget) {\n
widget.queryResultsEndpoint = widget.site().extensionSiteSettings.integrationSettings.queryResultsEndpoint;\n       
         widget.OSvCSSEEndpoint = widget.site().extensionSiteSettings.integrationSettings.OSvCSSEEndpoint;   \n\n   
             var userEmail = widget.user().emailAddress();\n                if (userEmail) {\n                    widget.getInfo(\'SELECT TEXTO, TIPO, MENU_NOTIFICACAO FROM OCC.TEXTO_NOTIFICACAO\',\n                        function(data) {\n                            widget.textos = {};\n                            data.forEach(function(texto) {\n                                widget.textos[texto.MENU_NOTIFICACAO] = {\n                                    texto: texto.TEXTO,\n                                    tipo: texto.TIPO\n                                };\n        
                    });\n                            widget.getInfo(\'SELECT Incident, TIPO FROM OCC.NOTIFICACAO WHERE Incident.PrimaryContact.ParentContact.Emails.Address = '\' + userEmail + \'' AND DATA_VISUALIZACAO IS NULL\',\n  
                              function(data) {\n                                    var visitas = 0,\n
                          favoritos = 0,\n                                        propostas = 0;\n
                  data.forEach(function(notificacao) {\n                                        var texto = widget.textos[notificacao.TIPO];\n                                        if (texto) {\n
        switch (texto.tipo) {\n                                                case VISITA':\n
                               visitas++;\n                                                    break;\n
                                   case 'FAVORITO':\n                                                    favoritos++;\n                                                    break;\n                                                case 
'PROPOSTA':\n                                                    propostas++;\n
               break;\n                                                default:\n
                 break;\n                                            }\n                                        }\n 
                                   });\n\n                                    $('.notif-visitas-disabled').removeClass('notif-visitas-disabled').addClass('notif-visitas');\n                                    $('.notif-favoritos-disabled').removeClass('notif-favoritos-disabled').addClass('notif-favoritos');\n                                    $('.notif-propostas-disabled').removeClass('notif-propostas-disabled').addClass('notif-propostas');\n
                   $('.notif-icon-visitas-disabled').removeClass('notif-icon-visitas-disabled').addClass('notif-icon-visitas');\n                                    $('.notif-icon-favoritos-disabled').removeClass('notif-icon-favoritos-disabled').addClass('notif-icon-favoritos');\n                                    $('.notif-icon-propostas-disabled').removeClass('notif-icon-propostas-disabled').addClass('notif-icon-propostas');\n\n
       var visitasAlt = \'\',\n                                        favoritosAlt = \'\',\n
                 propostasAlt = \'\';\n                                    if (visitas > 1)\n
                 visitasAlt = widget.titleMultiple.replace('{0}', visitas);\n                                    else if (visitas == 1)\n                                        visitasAlt = widget.titleSingle.replace('{0}', visitas);\n                                    else {\n                                        $('.notif-visitas').removeClass('notif-visitas').addClass('notif-visitas-disabled');\n                                        $('.notif-icon-visitas').removeClass('notif-icon-visitas').addClass('notif-icon-visitas-disabled');\n
  }\n\n                                    if (favoritos > 1)\n                                        favoritosAlt 
= widget.titleMultiple.replace('{0}', favoritos);\n                                    else if (favoritos == 1)\n   
                                     favoritosAlt = widget.titleSingle.replace('{0}', favoritos);\n
                   else {\n                                        $('.notif-favoritos').removeClass('notif-favoritos').addClass('notif-favoritos-disabled');\n                                        $('.notif-icon-favoritos').removeClass('notif-icon-favoritos').addClass('notif-icon-favoritos-disabled');\n                                    }\n\n 
                                   if (propostas > 1)\n                                        propostasAlt = widget.titleMultiple.replace('{0}', propostas);\n                                    else if (propostas == 1)\n
                             propostasAlt = widget.titleSingle.replace('{0}', propostas);\n
           else {\n                                        $('.notif-propostas').removeClass('notif-propostas').addClass('notif-propostas-disabled');\n                                        $('.notif-icon-propostas').removeClass('notif-icon-propostas').addClass('notif-icon-propostas-disabled');\n                                    }\n\n
                           $('.notif-visitas').attr(visitasAlt);\n                                    $('.notif-visitas').text(\'!\');\n\n                                    $('.notif-favoritos').attr(favoritosAlt);\n
                     $('.notif-favoritos').text(\'!\');\n\n                                    $('.notif-propostas').attr(propostasAlt);\n                                    $('.notif-propostas').text(\'!\');\n
          },\n                                function(error) {}\n                            );\n
      },\n                        function(error) {}\n                    );\n                }\n            },\n   
         // --------------------------- END BEXPERT ----------------------------------\n\n            elementName: 'login-registration-v2',\n\n            modalMessageType: ko.observable(''),\n            modalMessageText: ko.observable(''),\n            showErrorMessage: ko.observable(false),\n            userCreated: ko.observable(false),\n    
        ignoreBlur: ko.observable(false),\n\n            onLoad: function(widget) {\n                var self = this;\n\n                widget.user().ignoreEmailValidation(false);\n\n                navigation.setLoginHandler(function(data) {\n                    widget.user().handleSamlLogin();\n                });\n\n                // ---------------------------------------------------------------------------\n                // ------------------------------ BEXPERT ------------------------------------\n                // ---------------------------------------------------------------------------\n                self.reloadNotificacoes(widget);\n                $.Topic(\'RESET_NOTIFICACOES_HEADER.memory\').subscribe(function(data) {\n                    self.reloadNotificacoes(widget);\n        
        });\n                // --------------------------- END BEXPERT ----------------------------------\n\n      
          //REDIRECT AFTER LOGIN\n                /*$.Topic(pubsub.topicNames.USER_LOGIN_SUCCESSFUL).subscribe(function(obj) {\n                \var pagePath = window.location.pathname;\n\\\\\navigation.goTo(pagePath);\n\\\\});*/\n\n                // To display success notification after redirection from customerProfile page.\n                if (widget.user().delaySuccessNotification()) {\n                    notifier.sendSuccess(widget.WIDGET_ID, widget.translate('updateSuccessMsg'), true);\n                    widget.user().delaySuccessNotification(false);\n
    }\n\n                // Handle widget responses when registration is successful or invalid\n                $.Topic(pubsub.topicNames.USER_AUTO_LOGIN_SUCCESSFUL).subscribe(function(obj) {\n                    if (obj.widgetId === widget.WIDGET_ID) {\n                        self.userCreated(true);\n                        self.hideLoginModal();\n                        self.showErrorMessage(false);\n                        // Check if page refresh after auto login is completed, before displaying the notifier      \n                        $.when(widget.user().autoLoginComplete).then(function() {\n                            notifier.clearSuccess(widget.WIDGET_ID);\n
          notifier.sendSuccess(widget.WIDGET_ID, widget.translate('createAccountSuccess'));       \n
            $(window).scrollTop('0');\n                            widget.user().autoLoginComplete = $.Deferred();\n                        });\n                    }\n                });\n\n                $.Topic(pubsub.topicNames.USER_RESET_PASSWORD_SUCCESS).subscribe(function(data) {\n                    self.hideAllSections();\n
       self.hideLoginModal();\n                    notifier.sendSuccess(widget.WIDGET_ID, CCi18n.t('ns.common:resources.resetPasswordMessage'), true);\n                });\n\n                $.Topic(pubsub.topicNames.USER_RESET_PASSWORD_FAILURE).subscribe(function(data) {\n                    notifier.sendError(widget.WIDGET_ID, data.message, true);\n                });\n\n                $.Topic(pubsub.topicNames.USER_PASSWORD_GENERATED).subscribe(function(data) {\n                    $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalOpenedText'));    \n                    widget.user().ignoreEmailValidation(false);\n                    self.hideAllSections();\n                    $('#CC-forgotPasswordSectionPane').show();\n                    $('#CC-forgotPwd-input').focus();\n                    widget.user().emailAddressForForgottenPwd('');\n                    widget.user().emailAddressForForgottenPwd.isModified(false);\n                });\n\n                $.Topic(pubsub.topicNames.USER_PASSWORD_EXPIRED).subscribe(function(data) {\n                    $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalOpenedText'));    \n                    widget.user().ignoreEmailValidation(false);\n
           self.hideAllSections();\n                    $('#CC-forgotPasswordSectionPane').show();\n
    $('#CC-forgotPwd-input').focus();\n                    widget.user().emailAddressForForgottenPwd('');\n
           widget.user().emailAddressForForgottenPwd.isModified(false);\n                });\n\n\n                $.Topic(pubsub.topicNames.USER_CREATION_FAILURE).subscribe(function(obj) {\n                    if (obj.widgetId === widget.WIDGET_ID) {\n                        widget.user().resetPassword();\n                        self.modalMessageType(\'error\');\n                        self.modalMessageText(obj.message);\n                        self.showErrorMessage(true);\n                    };\n                });\n\n                $.Topic(pubsub.topicNames.USER_LOGIN_FAILURE).subscribe(function(obj) {\n                    self.modalMessageType(\'error\');\n\n                    if (obj.errorCode && obj.errorCode === CCConstants.ACCOUNT_ACCESS_ERROR_CODE) {\n                        self.modalMessageText(CCi18n.t('ns.common:resources.accountError'));\n                    } else {\n                        self.modalMessageText(CCi18n.t('ns.common:resources.loginError'));\n                    }\n\n                    self.showErrorMessage(true);\n                });\n\n                $.Topic(pubsub.topicNames.USER_LOGIN_SUCCESSFUL).subscribe(function(obj) {\n                    self.hideLoginModal();\n                    self.showErrorMessage(false);\n                    notifier.clearSuccess(widget.WIDGET_ID);\n                    $('#CC-loginHeader-myAccount').focus();\n                    $('#CC-loginHeader-myAccount-mobile').focus();\n                    location.reload();\n                });\n\n                $.Topic(pubsub.topicNames.USER_LOGOUT_SUCCESSFUL).subscribe(function(obj) {\n                    location.href = \'/home\';\n                });\n\n                // Replacing pubsub subscription with this. PubSub's getting called multiple times, causing this method to be called multiple times,\n
     // causing login modal to appear and disappears at times.\n                navigation.setLoginHandler(function(data) {\n\n                    // Do a subscription to page ready.\n                    $.Topic(pubsub.topicNames.PAGE_READY).subscribe(function(pageEvent) {\n                        if (pageEvent) {\n                            // 
Check if the pageId is undefined. If so, set it to empty string.\n                            if (pageEvent.pageId == undefined) {\n                                pageEvent.pageId = \'\';\n                            }\n
                 var loginHandlerPageParts = [];\n                            if (navigation.loginHandlerPage) {\n  
                              loginHandlerPageParts = navigation.loginHandlerPage.split('/');\n
       } else if (navigation.loginHandlerPage == \'\') {\n                                loginHandlerPageParts = [\'\'];\n                            }\n                            if ((navigation.loginHandlerPage == undefined) || 
(navigation.loginHandlerPage == null) \n|| (navigation.loginHandlerPage !== \'\' && pageEvent.path !== undefined && 
pageEvent.path !== null && navigation.loginHandlerPage.indexOf(pageEvent.path) == -1)) {\n
      return;\n                            }\n                        }\n                        if (data && data[0] && data[0].linkToRedirect) {\n                            widget.user().pageToRedirect(data[0].linkToRedirect);\n  
                          if (widget.user().loggedInUserName() != '' && !widget.user().isUserSessionExpired()) {  \n                                widget.user().handleSessionExpired();\n                            }\n
          }\n\n                        setTimeout(function() {\n                            $('#CC-headermodalpane').modal('show');\n                            self.hideAllSections();\n                            self.userCreated(false);\n                            $('#CC-loginUserPane').show();\n                            $('#CC-headermodalpane').on('shown.bs.modal', function() {\n                                if (!widget.user().loggedIn() && !widget.user().isUserLoggedOut() && widget.user().login() &&\n                                    widget.user().login() != '' && widget.user().isUserSessionExpired()) {\n                                    widget.user().populateUserFromLocalData(true);\n                                    $('#CC-login-password-input').focus();\n
       widget.user().password.isModified(false);\n                                } else {\n
            $('#CC-login-input').focus();\n                                    widget.user().login.isModified(false);\n                                }\n                                // Set the login handler page to null now\n   
                             navigation.loginHandlerPage = null;\n                            });\n\n
             $('#CC-headermodalpane').on('hidden.bs.modal', function() {\n                                if (!(self.userCreated() || widget.user().loggedIn()) &&\n                                    (($('#CC-loginUserPane').css('display') == 'block') ||\n                                        ($('#CC-registerUserPane').css('display') == 'block') ||\n                                        ($('#CC-updatePasswordPane').css('display') == 'block') ||\n
                              ($('#CC-forgotPasswordSectionPane').css('display') == 'block') ||\n
                     ($('#CC-forgotPasswordMessagePane').css('display') == 'block') ||\n
            ($('#CC-updatePasswordErrorMessagePane').css('display') == 'block'))) {     \n
          self.cancelLoginModal(widget);\n                                }\n                            });\n      
                  }, CCConstants.PROFILE_UNAUTHORIZED_DEFAULT_TIMEOUT);\n                    });\n                });\n\n                // This pubsub checks for the page parameters and if there is a token\n                // in the page URL, validates it and then starts the update expired/\n                // forgotten password modal.\n        
        $.Topic(pubsub.topicNames.PAGE_PARAMETERS).subscribe(function() {\n                    var token = this.parameters.occsAuthToken;\n                    // Proceed only if there is a token on the parameters\n
  if (token) {\n                        // Validate the token to make sure that it is valid\n
 // before proceeding to update the password.\n                        widget.user().validateTokenForPasswordUpdate(token,\n                            // Success callback\n                            function(data) {\n
                   // Let's try and update the password.\n                                $('#CC-headermodalpane').modal('show');\n                                self.hideAllSections();\n                                $('#CC-updatePasswordPane').show();\n                                $('#CC-headermodalpane').on('shown.bs.modal', function() {\n                                    $('#CC-updatePassword-email').focus();\n                                });\n  
                          },\n                            // Error callback\n                            function(data) {\n                                // Error function - show error message\n                                $('#CC-headermodalpane').modal('show');\n                                self.hideAllSections();\n
         $('#CC-updatePasswordErrorMessagePane').show();\n                            });\n                    }\n  
              });\n\n                $(document).on('hide.bs.modal', '#CC-headermodalpane', function() {\n
          if ($('#CC-loginUserPane').css('display') == 'block') {\n                        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.loginModalClosedText'));        \n                    } else if ($('#CC-registerUserPane').css('display') == 'block') {\n                        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.registrationModalClosedText')); \n                    } else if ($('#CC-forgotPasswordSectionPane').css('display') == 'block') {\n                        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalClosedText'));                    } else if ($('#CC-updatePasswordPane').css('display') == 'block') {\n     
                   $('#alert-modal-change').text(CCi18n.t('ns.common:resources.updatePasswordModalClosedText'));\n  
                  }\n                });\n                $(document).on('show.bs.modal', '#CC-headermodalpane', function() {\n                    if ($('#CC-loginUserPane').css('display') == 'block') {\n                        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.loginModalOpenedText'));        \n                    } else if ($('#CC-registerUserPane').css('display') == 'block') {\n                        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.registrationModalOpenedText')); \n                    } else if ($('#CC-forgotPasswordSectionPane').css('display') == 'block') {\n                        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalOpenedText'));                    } else if ($('#CC-updatePasswordPane').css('display') == 'block') {\n                        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.updatePasswordModalOpenedText'));\n                    }\n                });\n\n                // Added handlers to catch the ESC 
button when the password related models are open and closed with \nESC.\n                $(document).on('hidden.bs.modal', '#CC-headermodalpane', function() {\n                    if (!(self.userCreated() || widget.user().loggedIn()) &&\n                        ($('#CC-updatePasswordMessagePane').css('display') == 'block') ||\n
     ($('#CC-updatePasswordPane').css('display') == 'block') ||\n                        ($('#CC-forgotPasswordSectionPane').css('display') == 'block') ||\n                        ($('#CC-forgotPasswordMessagePane').css('display') == 'block') ||\n                        ($('#CC-updatePasswordErrorMessagePane').css('display') == 'block')) {\n     
                   self.cancelLoginModal(widget)\n                    }\n                });\n\n                /**\n                 * Invoked when SAML login is not successful\n                 */\n                $.Topic(pubsub.topicNames.SAML_LOGIN_FAILURE).subscribe(function(obj) {\n                    storageApi.getInstance().saveToMemory(CCConstants.CC_IS_SSO_LOGIN_FAILURE, true);\n                    if (widget.hasOwnProperty(\'user\')) {\n
        widget.user().handleCancel();\n                    if (widget.user().pageToRedirect() && widget.user().pageToRedirect() == widget.links().checkout.route && widget.cart().items().length > 0) {\n                        var hash = widget.user().pageToRedirect();\n                        widget.user().pageToRedirect(null);\n
      navigation.goTo(hash);\n                    }\n                    widget.user().pageToRedirect(null);\n      
              notifier.clearError(widget.WIDGET_ID);\n                    widget.user().clearUserData();\n
          widget.user().profileRedirect();\n                    } else {\n                    // This should not happen\n                    navigation.cancelLogin();\n                    }\n                    notifier.sendError(\'LOGIN_SSO\', CCi18n.t('ns.common:resources.loginError'), true);\n                });\n            },\n\n
/**\n             * Invoked when Login method is called\n             */\n            handleSamlLogin: function(data, event) {\n                data.user().handleSamlLogin();\n                return true;\n            },\n\n        
    /**\n             * Invoked when register method is called\n             */\n            handleSamlRegistration: function(data, event) {\n                data.user().handleSamlRegistration();\n                return true;\n     
       },\n\n            /**\n             * Invoked when Logout method is called\n             */\n            handleLogout: function(data) {\n                // returns if the profile has unsaved changes.\n                if (data.isUserProfileEdited()) {\n                return true;\n                }\n                // Clearing the auto-login success message\n                notifier.clearSuccess(this.WIDGET_ID);\n                // Clearing any other notifications\n                notifier.clearError(this.WIDGET_ID);\n                data.updateLocalData(data.loggedinAtCheckout(), false);\n                $.Topic(pubsub.topicNames.USER_LOGOUT_SUBMIT).publishWith([{message: \'success\'}]);\n            },\n\n            removeMessageFromPanel: function() {\n                var message = this;\n 
               var messageId = message.id();\n                var messageType = message.type();\n                notifier.deleteMessage(messageId, messageType);\n            },\n\n            emailAddressFocused: function(data) {\n 
               if (this.ignoreBlur && this.ignoreBlur()) {\n                    return true;\n                }\n   
             this.user().ignoreEmailValidation(true);\n                return true;\n            },\n\n            emailAddressLostFocus: function(data) {\n                if (this.ignoreBlur && this.ignoreBlur()) {\n
     return true;\n                }\n                this.user().ignoreEmailValidation(false);\n                return true;\n            },\n\n            passwordFieldFocused: function(data) {\n                if (this.ignoreBlur && this.ignoreBlur()) {\n                    return true;\n                }\n                this.user().ignorePasswordValidation(true);\n                return true;\n            },\n\n            passwordFieldLostFocus: function(data) {\n                if (this.ignoreBlur && this.ignoreBlur()) {\n                    return true;\n
     }\n                this.user().ignorePasswordValidation(false);\n                return true;\n            },\n\n            confirmPwdFieldFocused: function(data) {\n                if (this.ignoreBlur && this.ignoreBlur()) {\n                    return true;\n                }\n                this.user().ignoreConfirmPasswordValidation(true);\n                return true;\n            },\n\n            confirmPwdFieldLostFocus: function(data) {\n      
          if (this.ignoreBlur && this.ignoreBlur()) {\n                    return true;\n                }\n        
        this.user().ignoreConfirmPasswordValidation(false);\n                return true;\n            },\n\n       
     handleLabelsInIEModals: function() {\n                if (!!(navigator.userAgent.match(/Trident/))) {\n        
            $(\'#CC-LoginRegistrationModal label\').removeClass(\'inline\');\n                }\n            },\n\n 
           /**\n             * Registration will be called when register is clicked\n             */\n            registerUser: function(data, event) {\n                if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {\n                    notifier.clearError(this.WIDGET_ID);\n     
               //removing the shipping address if anything is set\n                    data.user().shippingAddressBook([]);\n                    data.user().updateLocalData(false, false);\n                    if (data.user().validateUser()) {\n                        $.Topic(pubsub.topicNames.USER_REGISTRATION_SUBMIT).publishWith(data.user(), [{ 
message: \'success\', widgetId: data.WIDGET_ID }]);\n                    }\n                }\n                return true;\n            },\n\n            /**\n             * this method is invoked to hide the login modal\n
    */\n            hideLoginModal: function() {\n                $('#CC-headermodalpane').modal('hide');\n
       $('body').removeClass('modal-open');\n                $('.modal-backdrop').remove();\n            },\n\n     
       /**\n             * Invoked when Login method is called\n             */\n            handleLogin: function(data, event) {\n                console.log('===========================');\n                console.log(data.user().login);\n                console.log(data.user().password);\n                if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {\n                    notifier.clearError(this.WIDGET_ID);\n                    if (data.user().validateLogin()) {\n                        data.user().updateLocalData(false, false);\n                        $.Topic(pubsub.topicNames.USER_LOGIN_SUBMIT).publishWith(data.user(), [{ message: \'success\' }]);\n                    }\n                }\n                return true;\n
   },\n\n            /**\n             * Invoked when cancel button is clicked on login modal\n             */\n    
        handleCancel: function(data, event) {\n                if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {\n                    notifier.clearError(this.WIDGET_ID);\n                    if (data.user().isUserSessionExpired()) {\n                        $.Topic(pubsub.topicNames.USER_LOGOUT_SUBMIT).publishWith([{ message: \'success\' }]);      \n                        this.hideLoginModal();\n                    }\n                }\n                return true;\n            },\n\n            handleCancelForgottenPassword: function(data, event) {\n                if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {\n                    notifier.clearError(this.WIDGET_ID);\n                    //navigation.doLogin(navigation.getPath(), data.links().home.route);\n                }\n     
           return true;\n            },\n\n            handleSuccessForgottenPassword: function(data, event) {\n    
            if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode 
=== 13)) {\n                    navigation.doLogin(data.links().home.route, data.links().home.route);\n
   }\n                return true;\n            },\n            /**\n             * this method is triggered when the user clicks on the save \n             * on the update password model\n             */\n            savePassword: 
function(data, event) {\n\n                if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {\n                    notifier.clearError(this.WIDGET_ID);\n
     data.user().ignoreConfirmPasswordValidation(false);\n                    data.user().ignoreEmailValidation(false);\n                    data.user().emailAddressForForgottenPwd.isModified(true);\n                    if (data.user().isPasswordValid(true) &&\n                        data.user().emailAddressForForgottenPwd &&\n
      data.user().emailAddressForForgottenPwd.isValid()) {\n                        data.user().updateExpiredPasswordUsingToken(data.user().token,\n                            data.user().emailAddressForForgottenPwd(), data.user().newPassword(),\n                            data.user().confirmPassword(),\n                            function(retData) {\n                                // Success function\n                                data['login-registration-v2'].hideAllSections();\n                                $('#CC-updatePasswordMessagePane').show();\n
                   $('#CC-updatePasswordMsgContinue').focus();\n                            },\n
        function(retData) {\n                                // Error function - show error message\n
                 data['login-registration-v2'].hideAllSections();\n                                $('#CC-updatePasswordErrorMessagePane').show();\n                            }\n                        );\n                    }\n  
              }\n                return true;\n            },\n\n            /**\n             * Invoked when cancel button is called on \n             */\n            cancelLoginModal: function(widget) {\n                if (widget.hasOwnProperty(\'user\')) {\n                    widget.user().handleCancel();\n                    if (widget.user().pageToRedirect() && widget.user().pageToRedirect() == widget.links().checkout.route && widget.cart().items().length > 0) {\n                        var hash = widget.user().pageToRedirect();\n                        widget.user().pageToRedirect(null);\n                        navigation.goTo(hash);\n                    } else {\n
          navigation.cancelLogin();\n                    }\n                    widget.user().pageToRedirect(null);\n                    notifier.clearError(widget.WIDGET_ID);\n                    widget.user().clearUserData();\n   
                 widget.user().profileRedirect();\n                } else {\n                    navigation.cancelLogin();\n                }\n            },\n\n            /**\n             * Invoked when Logout method is called\n 
            */\n            handleLogout: function(data) {\n                // returns if the profile has unsaved changes.\n                if (data.isUserProfileEdited()) {\n                    return true;\n                }\n    
            // Clearing the auto-login success message\n                notifier.clearSuccess(this.WIDGET_ID);\n    
            // Clearing any other notifications\n                notifier.clearError(this.WIDGET_ID);\n
   data.updateLocalData(data.loggedinAtCheckout(), false);\n                $.Topic(pubsub.topicNames.USER_LOGOUT_SUBMIT).publishWith([{ message: \'success\' }]);\n            },\n\n            /**\n             * Invoked when the modal dialog for registration is closed\n             */\n            cancelRegistration: function(data) {\n
       notifier.clearSuccess(this.WIDGET_ID);\n                notifier.clearError(this.WIDGET_ID);\n
 this.hideLoginModal();\n                data.user().reset();\n                this.showErrorMessage(false);\n      
          data.user().pageToRedirect(null);\n            },\n\n            /**\n             * Invoked when registration link is clicked\n             */\n            clickRegistration: function(data) {\n                notifier.clearSuccess(this.WIDGET_ID);\n                notifier.clearError(this.WIDGET_ID);\n                data.reset();\n   
             this.hideAllSections();\n                $('#CC-registerUserPane').show();\n                this.showErrorMessage(false);\n                $('#CC-headermodalpane').on('shown.bs.modal', function() {\n
$('#CC-userRegistration-firstname').focus();\n                    data.firstName.isModified(false);\n
 });\n            },\n\n            /**\n             * Invoked when login link is clicked\n             */\n       
     clickLogin: function(data) {\n                notifier.clearSuccess(this.WIDGET_ID);\n                notifier.clearError(this.WIDGET_ID);\n                data.reset();\n                this.hideAllSections();\n
 $('#CC-loginUserPane').show();\n                this.showErrorMessage(false);\n                $('#CC-headermodalpane').on('shown.bs.modal', function() {\n                    if (!data.loggedIn() && data.login() && data.login() != 
'' && data.isUserSessionExpired()) {    \n                        data.populateUserFromLocalData(true);\n
             $('#CC-login-password-input').focus();\n                        data.password.isModified(false);\n     
               } else {\n                        $('#CC-login-input').focus();\n                        data.login.isModified(false);\n                    }\n                    // Set the login handler page to null now\n
         navigation.loginHandlerPage = null;\n                });\n            },\n\n            /**\n             * Ignores the blur function when mouse click is up\n             */\n            handleMouseUp: function(data) {\n   
             this.ignoreBlur(false);\n                data.user().ignoreConfirmPasswordValidation(false);\n
       return true;\n            },\n\n            /**\n             * Ignores the blur function when mouse click is down\n             */\n            handleMouseDown: function(data) {\n                this.ignoreBlur(true);\n     
           data.user().ignoreConfirmPasswordValidation(true);\n                return true;\n            },\n\n     
       /**\n             * Ignores the blur function when mouse click is down outside the modal dialog(backdrop click).\n             */\n            handleModalDownClick: function(data, event) {\n                if (event.target === event.currentTarget) {\n                    this.ignoreBlur(true);\n                    this.user().ignoreConfirmPasswordValidation(true);\n                }\n                return true;\n            },\n\n            /**\n      
       * Invoked when register is clicked on login modal\n             */\n            showRegistrationSection: function(data) {\n                $('#alert-modal-change').text(CCi18n.t('ns.common:resources.registrationModalOpenedText'));\n                this.hideAllSections();\n                $('#CC-registerUserPane').show();\n                $('#CC-userRegistration-firstname').focus();\n                data.user().firstName.isModified(false);\n
   notifier.clearError(this.WIDGET_ID);\n                notifier.clearSuccess(this.WIDGET_ID);\n                data.user().reset();\n                this.showErrorMessage(false);\n            },\n\n            /**\n             * 
Invoked when forgotten Password link is clicked.\n             */\n            showForgotPasswordSection: function(data) {\n                $('#alert-modal-change').text(CCi18n.t('ns.common:resources.forgottenPasswordModalOpenedText'));    \n                data.ignoreEmailValidation(false);\n                this.hideAllSections();\n
   $('#CC-forgotPasswordSectionPane').show();\n                $('#CC-forgotPwd-input').focus();\n                data.emailAddressForForgottenPwd('');\n                data.emailAddressForForgottenPwd.isModified(false);\n
  },\n\n            showPrimeiroAcessoSectionPane: function(data) {\n                console.log('showPrimeiroAcessoSectionPane');\n                $('#alert-modal-change').text(CCi18n.t('ns.common:resources.forgottenPasswordModalOpenedText'));    \n                data.ignoreEmailValidation(false);\n                this.hideAllSections();\n     
           $('#CC-primeiroAcessoSectionPane').show();\n                data.emailAddressForForgottenPwd('');\n      
          data.emailAddressForForgottenPwd.isModified(false);\n            },\n\n            /**\n             * Hides all the sections of  modal dialogs.\n             */\n            hideAllSections: function() {\n
$('#CC-loginUserPane').hide();\n                $('#CC-registerUserPane').hide();\n                $('#CC-forgotPasswordSectionPane').hide();\n                $('#CC-updatePasswordPane').hide();\n                $('#CC-updatePasswordMessagePane').hide();\n                $('#CC-forgotPasswordMessagePane').hide();\n                $('#CC-updatePasswordErrorMessagePane').hide();\n                $('#CC-primeiroAcessoSectionPane').hide();\n            },\n\n     
       /**\n             * Resets the password for the entered email id.\n             */\n            resetForgotPassword: function(data, event) {\n                if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {\n                    data.user().ignoreEmailValidation(false);\n    
                data.user().emailAddressForForgottenPwd.isModified(true);\n                    if (data.user().emailAddressForForgottenPwd && data.user().emailAddressForForgottenPwd.isValid()) {\n                        data.user().resetForgotPassword();\n                    }\n                }\n                return true;\n            },\n\n  
          openStateSearch: function() {\n                $(\'#lightboxMap\').modal({\n                    show: true\n                });\n            }\n        };\n    }\n);\n